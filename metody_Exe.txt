1) Matlab - Grader:
data=readtable('Sunspots.csv','PreserveVariableNames',true);
head(data)
plot(data.Date, data.("Monthly Mean Total Sunspot Number"))
title('Sunspots', 'FontSize',25)
xlabel('Date',"FontSize",20)
head(data,5)
ylabel("Number of sunspots")
[h_kstest,p,ksstat,cv] = kstest(data.("Monthly Mean Total Sunspot Number"));
[h_adftest,pValue,stat,cValue] = adftest(data.("Monthly Mean Total Sunspot Number"));

2)  Obliczanie wartości wielomianu:
t=0.991:0.001:1.001
f1=(t-1).^6
f2=t.^6-6*t.^5+15*t.^4-20*t.^3+15*t.^2-6*t+1
x=0.999
func1=(x-1)^6
func2=x.^6-6*x.^5+15*x.^4-20*x.^3+15*x.^2-6*x+1
plot(t,f1,'g',t,f2,'r')


3)  Wykres funkcji wykładniczej - błąd obcięcia
t=-1:0.01:6
f_d=exp(t)
t1=6
f_dok=exp(1).^t1
f_5=maccaronni(5,t1)
f_10=maccaronni(10,t1)
f_100=maccaronni(100,t1)
one=maccaronni(5,t)
two=maccaronni(10,t)
three=maccaronni(100,t)
plot(t,f_d,'b',t,one,'g',t,two,'r',t,three,'k')
function sum_maccaronni = maccaronni(x,t)
    sum_maccaronni=0
    for i = 0:x-1
        sum_maccaronni=((t.^i)/(factorial(i)))+sum_maccaronni
    end
end

4) Suma liczb ( na zdjęciu )

5) MN_02_1 Eliminacja Gaussa - wyznacznik macierzy: 
A = [3,4,-2;6,2,3;-3,4,5]
rng(2022)
B = randn(7)
[detA,triX] = determinant(A)
[detB,triX2] = determinant(B)
function [detX,triX] = determinant(X)
      triX = X
      for j = 1:size(triX,1)-1
            div = triX(j,j)
            for z = j+1:size(triX,1)
                  div2 = -triX(z,j)/triX(j,j)
                  for k = 1:size(triX,2)
                      triX(z,k) = triX(j,k)*div2 + triX(z,k)
                  end
             end
        end
        detX = prod(diag(triX))
end


6) MN_02_2 Eliminacja Gaussa - rozwiązywanie równań liniowych
A = [-1,2,1;1,-3,-2;3,-1,-1]
B = [-1;-1;4]
[triX] = det(A,B);
[Y] = sol(triX);

rng(42);
G = randi([-30,30],6,6);
d = randi([-78,78],6,1);


[triY] = det(G,d)
[m] = sol(triY)


function [triX] = det(A,B)
      triX = horzcat(A,B);
      for j = 1:size(triX,1)-1
            div = triX(j,j);
            for z = j+1:size(triX,1)
                  div2 = -triX(z,j)/triX(j,j);
                  for k = 1:size(triX,2)
                      triX(z,k) = triX(j,k)*div2 + triX(z,k);
                  end
             end
        end
end

function [Y] = sol(triX) 
    Y = zeros(size(triX,1),1)
    for i = size(triX,1):-1:1
        sum = 0
        for j = i+1:size(triX,1)
            sum = sum + triX(i,j)*Y(j)
        end
        Y(i) = (triX(i,size(triX,1)+1) - sum)/triX(i,i)
    end 
end

7) MN_02_3 Dekompozycja LU

A = [1,4,2,-2;1,6,1,-1;-1,0,0,5;3,6,9,8]
[L,U] = dekmpLU(A)

function [L,U] = dekmpLU(A)
    n = size(A,1)
    U = A
    for i = 1:n-1
       X = eye(n)
       for j = i+1:n
           X(j,i) = -U(j,i)/U(i,i)
       end
       U = X*U
       if i==1
           L1 = inv(X)
       end 
       if i==2
           L2 = inv(X)
       end 
       if i==3
           L3 = inv(X)
       end
    end
    L = L1*L2*L3
end 

8) MN_03_1 Rozwiązywanie równań liniowych metodą iteracji prostej

A = [6,4,1;1,-3,-1;1,-1,-4];
B = [11;-3;-4];
X0= [2;0;-2];
[X,w1,w2,w3]=iter(A,B,X0)
function [X,w1,w2,w3] = iter(A,B,X0)
   n = size(A,1);
   D = zeros(n);
   for i = 1:n
      D(i,i) = A(i,i);
   end
   R = A - D;
   W = -inv(D)*R;
   Z = inv(D)*B;
   
   w1 = max(sum(abs(W),2))
   w2 = max(sum(abs(W),1))
   w3 = max(sqrt(sum(W.^2,'all')))
   e = 0.001
   m = 1000
   if w1 < 1 | w2 < 1 | w3 < 1
       X = X0
       while e < m
           X = W*X0+Z
           m = max(abs(X - X0))
           X0 = X
       end 
   end 
end

9) MN_03_2 Iteracja prosta - kryterium stopu
A = [6, 4, 1; 1, -3, -1; 1, -1, -4];
B = [11; -3; -4];
X0 = [2; 0; -2];

B

for i=1:10
    eps_values(i)=(1/10)^i
end
eps_values;

il_iteracji = zeros(size(eps_values));
sumy_roznic = zeros(size(eps_values));
solution_values = zeros(length(eps_values), length(X0));

for i = 1:length(eps_values)
    epsilon = eps_values(i);
    [X, iter, roznica] = it_prosta(A, B, X0, epsilon);
    il_iteracji(i) = iter;
    
end

il_iteracji

function [X,  iter , roznica] = it_prosta(A, B, X1, epsilon)
    D = zeros(size(A));
    n = length(A);
    
    

    for i = 1:n
        D(i,i) = A(i,i);
    end

    R = A - D;
    D2 = inv(D);
    W = -D2 * R;
    Z = D2 * B;
    
    X = zeros(size(X1));
    b = 100000;
    
    w1 = max(sum(abs(W),2));
    w2 = max(sum(abs(W),1));
    w3 = W.^2;
    w3 = sum(w3(:));
    w3 = sqrt(w3);
if w1<1 | w2<1 | w3<1
    iter = 0;
    while b >= epsilon
        X = W * X1 + Z;
        iter = iter + 1;
        a = X - X1;
        b = max(abs(a));
        X1 = X; 
    end
    roznica = a;
end
end

10) MN_04_1 Dekompozycja QR - transformacja Householdera
A = [-1,-1,1;1,3,3;-1,-1,5;1,3,7]
[R,Q] = qr_ht(A)
function [R,Q] = qr_ht(A) 
       n = size(A,1)
       y = size(A,2)
       B = A
       Q = eye(n)
       R = eye(n)*A
       for j = 1:y
             I2 = eye(n)
             a1 = B(:,1)
             n2 = size(B,1)
             nor = norm(a1)
             e1 = zeros(n2,1)
             e1(1,1) = 1
             v1 = a1 + sign(B(1,1))*nor*e1
             I = eye(n2)
             H1 = I  - (2*v1*v1')/(v1'*v1)
             I2(j:n,j:n) = H1
             R = I2*R
             x = size(R,2)
             y = size(I2,1)
             Q = Q*I2
             %B = I2(j+1:n,j+1:n)
             B = R(j+1:n,j+1:x)
        end
end


11) MN_04_2 Dekompozycja QR - metoda Grana-Schmidta
A=[-1,-1,1;1,3,3;-1,-1,5;1,3,7]
[Q,R] = qr_gs(A)

function [Q, R] = qr_gs(A)
    [m, n] = size(A);
    Q = zeros(m, n);
    R = zeros(n, n);

    for j = 1:n
        v = A(:, j);
        for i = 1:j-1
            R(i, j) = Q(:, i)' * A(:, j);
            v = v - R(i, j) * Q(:, i);
        end
        R(j, j) = norm(v);
        Q(:, j) = v / R(j, j);
    end
end

12) MN_04_3 Dokładność i czas wykonania dekompozycji QR


rng(42); 
A1 = randi([-500, 500], 15, 10);
A2 = randi([-500, 500], 30, 30);
A3 = randi([-500, 500], 75, 50);
A4 = randi([-500, 500], 150, 100);
A5 = randi([-500, 500], 300, 200);
A6 = randi([-500, 500], 750, 500);

A = {A1, A2, A3, A4, A5, A6};

time_qr_gs = zeros(1, 6);
for i = 1:numel(A)
    matrix = A{i};
    tic;
    [Q,R] = qr_gs(matrix);
    time_qr_gs(i) = toc;
    err_qr_gs(i) = sum(sum(Q*R-matrix));
end

figure;
plot(1:6, time_qr_gs, '-o');

function [R,Q] = qr_ht(A) 
       n = size(A,1)
       y = size(A,2)
       B = A
       Q = eye(n)
       R = eye(n)*A
       for j = 1:y
             I2 = eye(n)
             a1 = B(:,1)
             n2 = size(B,1)
             nor = norm(a1)
             e1 = zeros(n2,1)
             e1(1,1) = 1
             v1 = a1 + sign(B(1,1))*nor*e1
             I = eye(n2)
             H1 = I  - (2*v1*v1')/(v1'*v1)
             I2(j:n,j:n) = H1
             R = I2*R
             x = size(R,2)
             y = size(I2,1)
             Q = Q*I2
             %B = I2(j+1:n,j+1:n)
             B = R(j+1:n,j+1:x)
        end
end

function [Q, R] = qr_gs(A)
    [m, n] = size(A);
    Q = zeros(m, n);
    R = zeros(n, n);

    for j = 1:n
        v = A(:, j);
        for i = 1:j-1
            R(i, j) = Q(:, i)' * A(:, j);
            v = v - R(i, j) * Q(:, i);
        end
        R(j, j) = norm(v);
        Q(:, j) = v / R(j, j);
    end
end


13) MN_05_1 Interpolacja Lagrange'a
x = [1,2,3];
y = [0,1,4];
wektor = linspace(2, 4, 21);
iks = [1,1.5];
len  = size(wektor,2);
len2 = size(iks,2);
suma_igrek = 0;

for j = 1:len
    iks = wektor(j);
    [suma] = interp_lagrange(x,y,iks);
    suma_igrek = suma_igrek + suma;
end


suma_igrek
function [suma] = interp_lagrange(x,y,iks)
    n = size(x,2);
    suma = 0;
    for j = 1:n
        val = x(j);
        iloraz = 1;
        iloczyn = 1;
        for i = 1:n
            
            if i ~= j
                iloraz = iloraz * (x(j) - x(i));
                iloczyn = iloczyn * (iks - x(i));
            end
        end
        suma = suma + y(j)*(iloczyn / iloraz);
    end
end




14) MN_05_2 Interpolacja Newtona
x=[0,2,3,4,6];
y=[1,3,2,5,7];

wektor = linspace(2, 4, 21);
len = size(wektor, 2);
suma_igrek = 0;

iks = [1,1.5]
for j = 1:size(iks,2)
    h = iks(j);
    [suma] = interp_newton(x, y, h);
    suma
end

for j = 1:len
    h = wektor(j);
    [suma] = interp_newton(x, y, h);
    suma_igrek = suma_igrek + suma;
end

suma_igrek




function [igrek] = interp_newton(x,y,iks)
          d = size(x,2);
          M = zeros(d,d+1);
          for a = 1:d
              M(a,1) = x(a);
              M(a,2) = y(a);
          end
          mv = 1;
          x = 0;
          for a = 2:d
               for b = 1:d - a + 1
                   
                       x = b + mv;
                       licznik = M(b+1,a) - M(b,a);
                       dzielnik = M(x,1) - M(b,1);
                       M(b,a+1)=licznik/dzielnik
                       
               end
               mv = mv + 1;
          end
          temp = 1;
          igrek = 0;
          for h = 1:d
            igrek= igrek + M(1,h+1)*temp
            if h+2 <= d + 1
                temp = temp * (iks - M(h,1))
            end
          end
          
end

15) MN_05_3 Interpolacja Lagrange'a - cd

% Wczytanie danych
daneG = load('G.txt');
daneH = load('H.txt');

xG = linspace(-9,9,181)

% Interpolacja funkcji G
g_8_8 = zeros(size(xG));
for i = 1:length(xG)
    g(i) = interp_lagrange(daneG(1,:), daneG(2,:), xG(i));
end

xH = linspace(-9,9,181)
% Interpolacja funkcji H
h_8_8 = zeros(size(xH));
for i = 1:length(xH)
    h(i) = interp_lagrange(daneH(1,:), daneH(2,:), xH(i));
end

index = find(xG==-8.8)
g_8_8 = g(index)
h_8_8 = h(index)

% Wykres
figure;
hold on;
plot(daneG(1,:),daneG(2,:), 'ro', 'MarkerSize', 8);
plot(xG, g, 'b-', 'LineWidth', 2);
plot(daneH(1,:),daneH(2,:), 'go', 'MarkerSize', 8);
plot(xH, h, 'm-', 'LineWidth', 2);
legend('Punkty G', 'Interpolacja G', 'Punkty H', 'Interpolacja H', 'Location', 'best');
xlabel('x');
ylabel('y');
title('Interpolacja Lagrangea');
grid on;
hold off;

function [suma] = interp_lagrange(x,y,iks)
    n = size(x,2);
    suma = 0;
    for j = 1:n
        val = x(j);
        iloraz = 1;
        iloczyn = 1;
        for i = 1:n
            
            if i ~= j
                iloraz = iloraz * (x(j) - x(i));
                iloczyn = iloczyn * (iks - x(i));
            end
        end
        suma = suma + y(j)*(iloczyn / iloraz);
    end
end

16) MN_06_1 Aproksymacja średniokwadratowa
x = [-2,-1,0,1,2];
y = [4,1,0,1,4];

x2 = [-3 ,  -2,    -1,     0 ,    1,     2,     3];
y2 = [-13.5092,   15.0143,   15.6399,   11.9732,    2.1204,    7.1199,   22.1617];
len = 3
len2 = 4

m = m1(len,x,y)
m3 = m1(len2,x2,y2)
function [m] = m1(len,x,y)
    d = y';
    
    G = zeros(length(y),len);
    for i = 1:length(y)
        temp = x(i);
        for j = 1:len
            if j == 1
                G(i,j) = 1;
                continue
            end
            
            G(i,j) = temp;
            temp = temp * x(i);
        end
    end
            
            
      W = G'*G
      W2 = inv(W)
      B = G'*d
      
      c = W2*B
      m = c
      
end      
    

17) MN_06_2 Aproksymacja trygonometryczna

x=[0:0.1:pi];
y = [18, (-2-sqrt(2))/2, 21, (30-sqrt(2))/2, -18, (-2+sqrt(2))/2, 7, (30+sqrt(2))/2];
T = pi;
y0 = aproksymacja_trygonometryczna(y, T, x, 0);
y1 = aproksymacja_trygonometryczna(y, T, x, 1);
y2 = aproksymacja_trygonometryczna(y, T, x, 2);
y3 = aproksymacja_trygonometryczna(y, T, x, 3);

figure;
subplot(2, 2, 1);
plot(x, y0);
title('Aproksymacja stopnia 0');
xlabel('x');
ylabel('y');
grid on;

subplot(2, 2, 2);
plot(x, y1);
title('Aproksymacja stopnia 1');
xlabel('x');
ylabel('y');
grid on;

subplot(2, 2, 3);
plot(x, y2);
title('Aproksymacja stopnia 2');
xlabel('x');
ylabel('y');
grid on;

subplot(2, 2, 4);
plot(x, y3);
title('Aproksymacja stopnia 3');
xlabel('x');
ylabel('y');
grid on;

function [igrek, a0, ak, bk] = aproksymacja_trygonometryczna(y, T, iks, m)
    N = length(y);  % Zmiana na length(y) zamiast length(iks)
    N2 = length(iks)
    
    if m ~= 0
        igrek = zeros(1, N2);
    else
        igrek = 0;
    end
        
    ak = zeros(1, m);
    bk = zeros(1, m);
    a0 = 0;
    %omega = 2 * pi / T;
    for i = 1:N
        a0 = a0 + y(i);
    end
    a0 = a0 / N;

    for j = 1:m
        a0_ = 0;
        b0_ = 0;
        for i = 1:N    
            a0_ = a0_ + y(i) * cos((2*pi/N) * (i-1) * j);
            b0_ = b0_ + y(i) * sin((2*pi/N) * (i-1) * j);
        end
        ak(1,j) = 2/N * a0_;
        bk(1,j) = 2/N * b0_;
    end
    
    for i=1:N2 
        if m == 0
            igrek = a0
            break
        end
        igrek(i) = a0;
        
        for j = 1:m
            igrek(i) = igrek(i) + ak(j)*cos((j*2*pi/T)*iks(i)) + bk(j)*sin((j*2*pi/T)*iks(i));
        end
    end
end

18) ze zdjęć (Dyskretna transformata)

19) MN_08_1 Dekompozycja SVD

A = [1,1;0,1;1,0];
B = [2,1,-2]
C = [2,2,2,2;17/10,1/10,-17/10,-1/10;3/5,9/5,-3/5,-9/5]

% [U_econ, S_econ, V_econ] = svd(C, 'econ');
[U, S, V] = svd(C);

%reconstructed_A_econ = U_econ * S_econ * V_econ';
reconstructed_A = U * S * V';

20) MN_08_2 Zastosowanie SVD do rozwiązywania układów równań liniowych
p = load('punkty.txt')
x = p(:,1);
y = p(:,2);
G = ones(length(p), 2);
G(:,1) = x;
d = y;
[U, S, V] = svd(G, 'econ');
m = V*inv(S)*U'*d;
a = m(1)
b = m(2)
scatter(x, y, '.b');
hold on;
scatter(x, a*x+b, 50, 'o', 'o', 'linewidth', 2);

21) MN_08_3 Kompresja stratna obrazu
A = magic(5);
rng(42);
B = randi([1, 12], 18, 17);
[U_A, S_A, V_A] = svd(A);
[U_B, S_B, V_B] = svd(B);
figure;
subplot(1, 2, 1);
plot(diag(S_A), 'bo-');
title('Wartości szczególne macierzy A');
xlabel('Indeks');
ylabel('Wartość szczególna');
subplot(1, 2, 2);
plot(diag(S_B), 'ro-');
title('Wartości szczególne macierzy B');
xlabel('Indeks');
ylabel('Wartość szczególna');
mars = double(imread('mars.jpg'));
colormap(gray(256));
figure;
image(mars);
title('Oryginalny obraz mars');
[U_mars, S_mars, V_mars] = svd(mars);
figure;
plot(diag(S_mars), 'ko-');
title('Wartości szczególne macierzy obrazu mars');
xlabel('Indeks');
ylabel('Wartość szczególna');
mars200 = U_mars(:, 1:200) * S_mars(1:200, 1:200) * V_mars(:, 1:200)';
mars100 = U_mars(:, 1:100) * S_mars(1:100, 1:100) * V_mars(:, 1:100)';
mars25 = U_mars(:, 1:25) * S_mars(1:25, 1:25) * V_mars(:, 1:25)';
figure;
subplot(2, 2, 1);
image(mars);
title('Oryginalny obraz mars');
subplot(2, 2, 2);
image(mars200);
title('Mars - 200 wartości własnych');
subplot(2, 2, 3);
image(mars100);
title('Mars - 100 wartości własnych');
subplot(2, 2, 4);
image(mars25);
title('Mars - 25 wartości własnych');
nfull = nnz(U_mars) + nnz(S_mars) + nnz(V_mars);
n200 = nnz(U_mars(:, 1:200)) + nnz(S_mars(1:200, 1:200)) + nnz(V_mars(:, 1:200));
n100 = nnz(U_mars(:, 1:100)) + nnz(S_mars(1:100, 1:100)) + nnz(V_mars(:, 1:100));
n25 = nnz(U_mars(:, 1:25)) + nnz(S_mars(1:25, 1:25)) + nnz(V_mars(:, 1:25));

22) MN_09_1 Pierwsza pochodna funkcji
x = [-2*pi : 0.1 : 2*pi];
y = my_fun1(x);
yp = my_fun1p(x);
subplot(211), plot(x, y);
hold on;

yp2_01 = firstDer2order(@my_fun1, x, 0.1);
yp2_05 = firstDer2order(@my_fun1, x, 0.5);
yp4_01 = firstDer4order(@my_fun1, x, 0.1);
yp4_05 = firstDer4order(@my_fun1, x, 0.5);
scatter(x, yp2_05, 'o');
hold on;
scatter(x, yp4_05, '.');
function [y] = my_fun1p(x)
    y = 2/3.*x.*sin(3.*x) + x .* x .* cos(3.*x)
end

function [y] = firstDer2order(fun, x, h)
    y = (fun(x+h) - fun(x-h))/(2*h);
end

function [y] = firstDer4order(fun, x, h)
    y = 1/(12*h)*(fun(x-2*h)-8*fun(x-h)+8*fun(x+h)-fun(x+2*h));
end

function [y] = my_fun1(x)
    y = 1/3.*x.*x.*sin(3.*x);
end

23) MN_09_1 Druga pochodna funkcji
x = [-2*pi : 0.1 : 2*pi];
y = my_fun2(x);
yp = my_fun2p(x);
yp2_01 = secondDer2order(@my_fun2, x, 0.1);
yp2_05 = secondDer2order(@my_fun2, x, 0.5);
yp4_01 = secondDer4order(@my_fun2, x, 0.1);
yp4_05 = secondDer4order(@my_fun2, x, 0.5);
subplot(211), plot(x, y);
hold on;
subplot(211), scatter(x, yp2_05);
hold on;
subplot(211), scatter(x, yp4_05);
subplot(212), plot(x, yp, '-');
hold on;
subplot(212), scatter(x, yp2_01);
hold on;
subplot(212), scatter(x, yp4_01);
function [y] = secondDer2order(fun, x, h)
    y = (fun(x+h)-2*fun(x)+fun(x-h))/(h*h);
end
function [y] = secondDer4order(fun, x, h)
    y = 1/(12*h*h)*(-fun(x-2*h)+16*fun(x-h)-30*fun(x)+16*fun(x+h)-fun(x+2*h));
end
function [y] = my_fun2(x)
    y = 1/3*sin(3*x).*exp(-x.*x);
end
function [y] = my_fun2p(x)
    y = 1/3*(4*x.*x-11).*exp(-x.*x).*sin(3*x) - 4*x.*exp(-x.*x).*cos(3*x);
end

24) MN_10_1 Całkowanie - metoda prostokątów i trapezów

% Funkcja do całkowania
fun = @(x) x.^2 - 4;

% Przedziały całkowania
a = 2;
b = 4;
h = 0.01;

a2 = 0;
b2 = 4;

p24 = integral_rectangle(fun, a, b, h);
t04 = integral_trapez(fun, a2, b2, h);

function y = integral_rectangle(fun, a, b, h)
    x = a:h:b-h;
    y = fun(x);
    area = sum(y) * h;
    
    y = area
end

function y = integral_trapez(fun, a2, b2, h)
    x = a2+h:h:b2-h;
    y = fun(x);
    y1 = fun(a2);
    yn = fun(b2);
    area = 0.5*h*(y1 + yn) + sum(y) * h;
    
    y = area
end


25) MN_10_2 Całkowanie - badanie błędu całkowania
x = [-5 : 0.1 : 5];
val = 1/3*exp(-x.*x).*x.*x.*x;
y = @(x)1/3*exp(-x.*x).*x.*x.*x;
h = [1, 1/2, 1/4, 1/8, 1/16, 1/32, 1/64, 1/128, 1/256, 1/512];

val_c = 1/6-5/(6*exp(4));  % wartosc calki na papierze
val_p = integral_rectangle(y, 0, 2, 1/8);
val_t = integral_trapez(y, 0, 2, 1/8);

pl_c = zeros(1,length(h));
pl_p = zeros(1,length(h));
pl_t = zeros(1,length(h));

for i=1:length(h)
    pl_c(1,i) = val_c;
    pl_p(1,i) = integral_rectangle(y, 0, 2, h(i));
    pl_t(1,i) = integral_trapez(y, 0, 2, h(i));
end

subplot(211), plot(x, val);
subplot(212), plot(h, pl_c);
hold on; % nanoszenie wielu zbiorow danych na ten sam wykres
plot(h, pl_p);
hold on;
plot(h, pl_t);
legend('wartość dokładna' , 'metoda prostokątów', 'metoda trapezów');

function y = integral_rectangle(fun, a, b, h)
    x = a:h:b-h;
    y = fun(x);
    area = sum(y) * h;
    
    y = area
end

function y = integral_trapez(fun, a, b, h)
    x = a+h:h:b-h;
    y = fun(x);
    y1 = fun(a);
    yn = fun(b);
    area = 0.5*h*(y1 + yn) + sum(y) * h;
    
    y = area
end

26) MN_11_1 Generatory liczb pseudolosowych
a_values = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]; 
X0 = 1; 
m = 11; 
n = 11; 
for k = 1:length(a_values)
    a = a_values(k);
    X = zeros(1, n);
    X(1) = X0;
    for i = 2:n
        X(i) = mod(a * X(i-1), m);
    end
    disp(['Zestaw dla a = ', num2str(a), ': ', num2str(X)]);
end

% Wykresy rozrzutu dla a = 2 oraz a = 8
a_scatter_values = [2, 8];
for a = a_scatter_values
    X = zeros(1, n);
    X(1) = X0;
    for i = 2:n
        X(i) = mod(a * X(i-1), m);
    end
    
    % Wykres rozrzutu
    figure;
    scatter(X(1:end-1), X(2:end));
    title(['Wykres rozrzutu dla a = ', num2str(a)]);
    xlabel('x_n');
    ylabel('x_{n+1}');
end
N = 10001;
% a) Generator 1: xn = 3*xn-1 mod(31), x0 = 15
a = 3;
m = 31;
x0 = 15;
x = zeros(1, N);
x(1) = x0;
x
for i = 2:N
    x(i) = mod(a * x(i-1), m);
end
x_normalized = x / m;
figure;
scatter(x_normalized(1:end-1), x_normalized(2:end));
title('Wykres rozrzutu dla generatora 3*x_{n-1} mod(31)');
xlabel('x_n');
ylabel('x_{n+1}');
a_n = x_normalized(end);
a_n

% b) Generator 2: xn = 7^5 * xn-1 mod(2^31 - 1), x0 = 15
a = 7^5;
m = 2^31 - 1;
x0 = 1;
x = zeros(1, N);
x(1) = x0;
for i = 2:N
    x(i) = mod(a * x(i-1), m);
end
x_normalized = x / m;
figure;
scatter(x_normalized(1:end-1), x_normalized(2:end));
title('Wykres rozrzutu dla generatora 7^5*x_{n-1} mod(2^{31} - 1)');
xlabel('x_n');
ylabel('x_{n+1}');
b_n = x_normalized(end);
b_n

% Wyświetlenie ostatnich wartości
disp(['Ostatnia wartość dla generatora (a): ', num2str(a_n)]);
disp(['Ostatnia wartość dla generatora (b): ', num2str(b_n)]);

27) MN_11_2 Monte Carlo - liczba pi
rng(42);
N_values = [1000, 10000, 100000, 1000000];
pi_estimates = zeros(size(N_values));
for i = 1:length(N_values)
    N = N_values(i);
    x = rand(N, 1);
    y = rand(N, 1);
    x_center = 0.5;
    y_center = 0.5;
    radius = 0.5;
    distances = sqrt((x - x_center).^2 + (y - y_center).^2);
    N0 = sum(distances <= radius);
    pi_estimates(i) = (N0 / N) * 4;
end
pi100_000 = pi_estimates(3);
disp('Oszacowane wartości pi:');
disp(array2table(pi_estimates', 'VariableNames', {'Pi_Estimate'}, 'RowNames', {'N=1000', 'N=10000', 'N=100000', 'N=1000000'}));
% Wykresy wyników
figure;
plot(N_values, pi_estimates, '-o');
xlabel('Liczba losowań (N)');
ylabel('Oszacowana wartość pi');
title('Oszacowanie wartości pi na podstawie losowania punktów w kole');
grid on;

28) MN_11_3 Monte Carlo - całka

rng(42);

N0 = 0;
a = -2;
b = 2;
N = 10000;
d = 4;

underx = [];
abovex = [];
undery = [];
abovey = [];

for i = 1 : N
    x = a + (b-a).*rand();
    y = 0 + (d-0).*rand();
    
    if y <= myfun(x)
        N0 = N0 + 1;
        underx = [underx x];
        undery = [undery y];
    else
        abovex = [abovex x];
        abovey = [abovey y];
    end
end

int10_000 = N0/N*(b-a)*d


plot(underx, undery, '.g', abovex, abovey, '.b')


function [y] = myfun(x)
    y = (4-x.*x);
end

29) MN_12_1 Metoda bisekcji
eps = 0.01;
fun = @(x) exp(-x) + sin(2*x + pi/3);
x = [0 : eps : 4]
val = exp(-x) + sin(2*x + pi/3);
a = 0;
b = 2;
[x1, iter] = bisekcja(fun, a, b, eps);



hold on;
plot(x, val);
plot(x1,exp(-x1) + sin(2*x1 + pi/3), 'ro');
legend('exp(-x) + sin(2*x + pi/3)','m zerowe')
hold off;

function [x1, iter] = bisekcja(fun,a, b, eps)
    iter = 0;
    while abs(b - a) > eps
        x1 = (a + b) / 2;
        val = fun(x1) * fun (a);
        if val > 0
            a = x1;
        
        else
            b = x1;
        end
        iter = iter + 1;
    end
end

30) MN_12_2 Metoda bisekcji - cd
eps = 0.0001;
[nowe_a,nowe_b,x1] = szukajWprzedziale(@(x) exp(-x)+sin(2*x+ pi/3),0,4,20,eps );


x = [0:eps:4]
val = exp(-x)+sin(2*x+ pi/3);
hold on;
plot(x, val);
plot(x1,exp(-x1) + sin(2*x1 + pi/3), 'ro');
legend('exp(-x) + sin(2*x + pi/3)','m zerowe')
hold off;
function [x1, iter] = bisekcja(fun,a, b, eps)
    iter = 0;
    while abs(b - a) > eps
        x1 = (a + b) / 2;
        val = fun(x1) * fun (a);
        if val > 0
            a = x1;
        
        else
            b = x1;
        end
        iter = iter + 1;
    end
end
function [nowe_a, nowe_b, nowe_mz] = szukajWprzedziale(fun, a, b, ile, eps)
    linsp = linspace(a,b,ile+1);
    k = 1;
    nowe_a = [];
    nowe_b = [];
    nowe_mz = [];
    for i=1:max(size(linsp))-1
        if (fun(linsp(i))*fun(linsp(i+1)) < 0) 
            nowe_mz = [nowe_mz, bisekcja(fun,linsp(i),linsp(i+1),eps)];
            nowe_a = [nowe_a,linsp(i)];
            nowe_b = [nowe_b,linsp(i+1)];
            
        end
    end
    nowe_a
    nowe_b
    nowe_mz    
end

31) MN_12_3 Metoda regula falsi
eps = 0.01;
fun = @(x) exp(-x) + sin(2*x + pi/3);
x = [3:eps:5.5]
val = exp(-x) + sin(2*x + pi/3);
a=3;
b=5.5;

[x1, iter] = regula_falsi(fun, a, b, eps);
function [x1, iter] = regula_falsi(fun, a, b, eps)
    iter = 0;
    x1 = a - fun(a) * (b - a) / ( fun(b) - fun(a) );
    while abs(fun(x1)) > eps
        x1 = a - fun(a) * (b - a) / ( fun(b) - fun(a) );
        val = fun(x1) * fun (a);
        if val > 0
            a = x1;
        else
            b = x1;
        end
        iter = iter + 1;
    end
end


32) MN_12_4 Metoda stycznych

fun = @(x) exp(-x) + sin(2*x + pi/3);
pochodna = @(x) -exp(-x) + 2 * cos(2*x + pi/3)
eps = 0.01;
a = 0;
b = 4;
x0 = 4;
[x1, iter] = stycznych(fun, pochodna, a, b, eps, x0);

function [x1, iter, x_all] = stycznych(fun, pochodna, a, b, eps, x0)
    iter = 1;
    x1 = x0 - fun(x0)/pochodna(x0);
    while abs(fun(x1)) > eps
        x1 = x1 - fun(x1)/pochodna(x1);
        val = fun(x1) * fun (a);
        if val > 0
            a = x1;
        else
            b = x1;
        end
        iter = iter + 1;
    end
end

33) MN_13_1 Metody samostartujące

a = 0;
b = 2;
y0 = 1;
x0 = 0;
h = 0.1;
x = a:h:b;
eu = rrz_euler(@(x,y) y - x^2 , a,b,h,x0,y0);
eu_19 = eu(20); %eu(20) poniewaz, 0 to indeks 1, wiec trzeba dodac 1
tr = rrz_trapez(@(x,y) y - x^2 , a,b,h,x0,y0);
tr_19 = tr(20);
rk = rrz_rk(@(x,y) y - x^2 , a,b,h,x0,y0);
rk_19 = rk(20);
y_an = x.^2 + 2.*x - exp(x) + 2;
an_19 = y_an(20);
plot(x,eu',x,tr',x,rk',x,y_an,'o')
legend("Eulera","Trapeza","Rungego-Kutty","Analitycznie",'Location','South');
function [y] = rrz_euler(fun, a,b,h,x0,y0)
    y = zeros((b-a)/h+1,1);
    x = zeros((b-a)/h+1,1);
    y(1) = y0;
    x(1) = x0;
    for i=2:max(size(y))
        x(i) = x(i-1) + h;
        y(i) = y(i-1) + h*fun(x(i-1),y(i-1));
    end
    
end

function [y] = rrz_trapez(fun, a,b,h,x0,y0)
    y = zeros((b-a)/h+1,1);
    
    y(1) = y0;
    x(1) = x0;
    for i=2:max(size(y))
        x(i) = x(i-1) + h;
        y(i) = y(i-1) + h/2*( fun(x(i-1),y(i-1))  + fun(x(i),y(i-1) + h*fun(x(i-1),y(i-1)) ) );
    end
    
end

function [y] = rrz_rk(fun, a,b,h,x0,y0)
    y = zeros((b-a)/h+1,1);
    x = zeros((b-a)/h+1,1);
    y(1) = y0;
    x(1) = x0;
    for i=2:max(size(y))
        x(i) = x(i-1) + h;
        k1 = h*fun(x(i-1),y(i-1));
        k2 = h*fun(x(i-1)+h/2,y(i-1)+k1/2);
        k3 = h*fun(x(i-1)+h/2,y(i-1)+k2/2);
        k4 = h*fun(x(i-1)+h,y(i-1)+k3);
        y(i) = y(i-1) + (k1 + 2*k2 + 2*k3 + k4)/6;
    end
end

34) MN_13_2 Metoda Adamsa - Bashfortha

h = 0.1;
a = 0;
b = 2;
y0 = 1;
x0 = 0;
x = a:h:b;
ab2 = rrz_ab(@(x,y) y - x^2, a,b,h,x0,y0,2);
ab2_19 = ab2(20);

ab1 = rrz_ab(@(x,y) y - x^2, a,b,h,x0,y0,1);
ab1_19 = ab1(20);

ab3 = rrz_ab(@(x,y) y - x^2, a,b,h,x0,y0,3);
ab3_19 = ab3(20);

ab4 = rrz_ab(@(x,y) y - x^2, a,b,h,x0,y0,4);
ab4_19 = ab4(20);

y_an = x.^2 + 2.*x - exp(x) + 2;

plot(x,ab1',x,ab2',x,ab3',x,ab4',x,y_an,'o')
legend("A-B rz1","A-B rz2","A-B rz3","A-B rz4","analitycznie","Location","South")

function [y] = rrz_ab(fun, a,b,h,x0,y0,rz)
    y = zeros((b-a)/h+1,1);
    x = zeros((b-a)/h+1,1);
    y(1) = y0;
    x(1) = x0;
    temp = rrz_rk(fun, a,a+rz*h,h,x0,y0);
    for i=2:max(size(temp))
        x(i) = x(i-1)+h;
        y(i) = temp(i);
    end
    if rz == 1
        for i=max(size(temp))+1:max(size(y))
            x(i) = x(i-1)+h;
            y(i) = y(i-1) + h/2*( -1 * fun(x(i-2),y(i-2)) + 3 * fun(x(i-1),y(i-1)) ) ; 
         end
    end
    if rz == 2
        for i=max(size(temp))+1:max(size(y))
            x(i) = x(i-1)+h;
            y(i) = y(i-1) + h/12*(5*fun(x(i-3),y(i-3)) - 16 * fun(x(i-2),y(i-2)) + 23 * fun(x(i-1),y(i-1)) ) ; 
         end
    end
    if rz == 3
        for i=max(size(temp))+1:max(size(y))
            x(i) = x(i-1)+h;
            y(i) = y(i-1) + h/24*( -9*fun(x(i-4),y(i-4)) + 37*fun(x(i-3),y(i-3)) - 59 * fun(x(i-2),y(i-2)) + 55 * fun(x(i-1),y(i-1)) ) ; 
         end
    end
    if rz == 4 
        for i=max(size(temp))+1:max(size(y))
            x(i) = x(i-1)+h;
            y(i) = y(i-1) + h/720*( 251*fun(x(i-5),y(i-5)) -1274*fun(x(i-4),y(i-4)) + 2616*fun(x(i-3),y(i-3)) - 2774 * fun(x(i-2),y(i-2)) + 1901 * fun(x(i-1),y(i-1)) ) ; 
         end
    end
end

function [y] = rrz_rk(fun, a,b,h,x0,y0)
    y = zeros((b-a)/h+1,1);
    x = zeros((b-a)/h+1,1);
    y(1) = y0;
    x(1) = x0;
    for i=2:max(size(y))
        x(i) = x(i-1) + h;
        k1 = h*fun(x(i-1),y(i-1));
        k2 = h*fun(x(i-1)+h/2,y(i-1)+k1/2);
        k3 = h*fun(x(i-1)+h/2,y(i-1)+k2/2);
        k4 = h*fun(x(i-1)+h,y(i-1)+k3);
    
        y(i) = y(i-1) + (k1 + 2*k2 + 2*k3 + k4)/6;
    end
end




